---
import type { ImageMetadata } from 'astro'
import { Image } from 'astro:assets'

interface Props {
  image: ImageMetadata
}

const { image } = Astro.props
---

<section
  class="group grid md:grid-cols-2"
  data-animate="section"
>
  <div
    class="order-last flex max-w-xl flex-col justify-center space-y-16 self-start p-56 text-white group-even:ml-0 md:order-none md:ml-auto md:py-[50dvh] group-even:md:order-last"
  >
    <slot />
    <h2 class="text-lg font-bold">Dolor aliquip laboris</h2>
    <p>
      Nisi dolor labore quis est reprehenderit. Ex aliqua
      laboris nisi mollit consectetur exercitation enim aute
      proident fugiat sunt. Consectetur culpa ea dolor
      culpa. Ea commodo ullamco ex ea amet nostrud amet
      ipsum ad mollit occaecat anim. Velit est pariatur
      excepteur irure eu esse officia nulla non. Dolore ea
      aute labore excepteur ad. Dolor dolor labore do
      pariatur excepteur duis cillum duis Lorem id occaecat
      aliquip excepteur.
    </p>
    <p>
      Nisi dolor labore quis est reprehenderit. Ex aliqua
      laboris nisi mollit consectetur exercitation enim aute
      proident fugiat sunt. Consectetur culpa ea dolor
      culpa. Ea commodo ullamco ex ea amet nostrud amet
      ipsum ad mollit occaecat anim. Velit est pariatur
      excepteur irure eu esse officia nulla non. Dolore ea
      aute labore excepteur ad. Dolor dolor labore do
      pariatur excepteur duis cillum duis Lorem id occaecat
      aliquip excepteur.
    </p>
  </div>
  <div class="motion-reduce:relative">
    <Image
      src={image}
      alt=""
      class="w-full bg-black/20 object-cover motion-reduce:inset-0 md:fixed md:bottom-0 md:top-0 md:h-dvh md:max-h-none md:w-1/2 md:opacity-0 group-odd:md:right-0 motion-reduce:md:sticky motion-reduce:md:w-full motion-reduce:md:opacity-100"
    />
  </div>
</section>

<script>
  import { gsap } from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'

  gsap.registerPlugin(ScrollTrigger)

  interface AnimatedElement extends Element {
    dataset?: DOMStringMap
    timeline?: gsap.core.Timeline
  }

  const mm = gsap.matchMedia()

  export const mmFilters = {
    isDesktop: '(min-width: 768px)',
    isMobile: '(max-width: 767.98px)',
    reduceMotion: '(prefers-reduced-motion: reduce)',
  }

  mm.add(mmFilters, (context) => {
    let { isMobile, reduceMotion } =
      context.conditions ?? {}

    if (isMobile || reduceMotion) return

    const bgColors = [
      'hsla(156, 98%, 26%, 1)',
      'hsla(15, 25%, 48%, 1)',
      'hsla(196, 100%, 34%, 1)',
      'hsla(292, 53%, 43%, 1)',
      'hsla(216, 66%, 27%, 1)',
    ]

    const bgTimeline = gsap.timeline()

    bgColors.forEach((value) => {
      bgTimeline.to('[data-animate="background"]', {
        backgroundColor: value,
      })
    })

    ScrollTrigger.create({
      animation: bgTimeline,
      trigger: '[data-animate="background"]',
      start: 'top top',
      end: 'bottom bottom',
      scrub: 2,
    })

    ScrollTrigger.batch('[data-animate]', {
      start: 'top 50%',
      end: 'bottom 50%',
      onEnter: (batch) => {
        batch.forEach((el: AnimatedElement, i: number) => {
          setAnimation(el, i)
        })
      },
      onEnterBack: (batch) => {
        batch.forEach((el: AnimatedElement, i: number) => {
          setAnimation(el, i, -1)
        })
      },
      onLeave: (batch) => {
        batch.forEach((el: AnimatedElement) => {
          // kill the timeline when leaving the viewport
          el.timeline?.kill()

          gsap.to(el.querySelector('img'), {
            opacity: 0,
            yPercent: 150,
            duration: 0.5,
            clearProps: 'all',
          })
        })
      },
      onLeaveBack: (batch) => {
        batch.forEach((el: AnimatedElement) => {
          // kill the timeline when leaving the viewport
          el.timeline?.kill()

          gsap.to(el.querySelector('img'), {
            yPercent: -150,
            duration: 0.5,
            opacity: 0,
            clearProps: 'all',
          })
        }, 0)
      },
    })

    function setAnimation(
      el: AnimatedElement,
      index: number = 0,
      direction?: -1 | 1,
    ) {
      direction = direction || 1

      const yPercent = -150 * direction

      const tl = gsap.timeline()
      const animationStagger = 0.25

      tl.fromTo(
        el.querySelector('img'),
        { opacity: 0 },
        {
          opacity: 1,
          delay: index * animationStagger,
          duration: 1,
        },
      ).fromTo(
        el.querySelector('img'),
        { yPercent },
        {
          yPercent: 0,
          delay: index * animationStagger,
          ease: 'circ.out',
          duration: 0.75,
          clearProps: 'yPercent',
        },
        0,
      )

      // store the timeline on the element
      el.timeline = tl
    }
  })
</script>
